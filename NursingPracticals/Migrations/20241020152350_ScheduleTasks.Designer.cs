// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NursingPracticals.Contexts;

#nullable disable

namespace NursingPracticals.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241020152350_ScheduleTasks")]
    partial class ScheduleTasks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedname");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_roleclaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnetroleclaims_roleid");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claimvalue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userclaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnetuserclaims_userid");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("providerdisplayname");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_aspnetuserlogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnetuserlogins_userid");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(64)")
                        .HasColumnName("userid");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_aspnetuserroles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnetuserroles_roleid");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("character varying(64)")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_aspnetusertokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NursingPracticals.Contexts.ApplicationUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("accessfailedcount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("emailconfirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("fullname");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockoutend");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedemail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalizedusername");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NursingPracticals.Models.ClassSchedules", b =>
                {
                    b.Property<int>("ClassSchedulesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("classschedulesid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClassSchedulesID"));

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("examdate");

                    b.Property<int?>("MainClassesID")
                        .HasColumnType("integer")
                        .HasColumnName("mainclassesid");

                    b.Property<string>("ScheduleName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("schedulename");

                    b.Property<int>("TaskGroupsID")
                        .HasColumnType("integer")
                        .HasColumnName("taskgroupsid");

                    b.HasKey("ClassSchedulesID")
                        .HasName("pk_classschedules");

                    b.HasIndex("MainClassesID");

                    b.HasIndex("TaskGroupsID");

                    b.ToTable("classschedules", (string)null);
                });

            modelBuilder.Entity("NursingPracticals.Models.ComponentTasks", b =>
                {
                    b.Property<short>("ComponentTasksID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("componenttasksid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("ComponentTasksID"));

                    b.Property<string>("ComponentTask")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("componenttask");

                    b.Property<byte>("Difficulty")
                        .HasColumnType("smallint")
                        .HasColumnName("difficulty");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int?>("ProgramsID")
                        .HasColumnType("integer")
                        .HasColumnName("programsid");

                    b.Property<int>("TaskGroupsID")
                        .HasColumnType("integer")
                        .HasColumnName("taskgroupsid");

                    b.HasKey("ComponentTasksID")
                        .HasName("pk_componenttasks");

                    b.HasIndex("ProgramsID");

                    b.HasIndex("TaskGroupsID");

                    b.ToTable("componenttasks", (string)null);
                });

            modelBuilder.Entity("NursingPracticals.Models.Exams", b =>
                {
                    b.Property<int>("ExamsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("examsid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExamsID"));

                    b.Property<short>("ComponentTasksID")
                        .HasColumnType("smallint")
                        .HasColumnName("componenttasksid");

                    b.Property<byte>("Score")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("smallint")
                        .HasColumnName("score");

                    b.Property<int?>("StudentsStudentID")
                        .HasColumnType("integer")
                        .HasColumnName("studentsstudentid");

                    b.Property<int>("TeacherSchedulesID")
                        .HasColumnType("integer")
                        .HasColumnName("teacherschedulesid");

                    b.HasKey("ExamsID")
                        .HasName("pk_exams");

                    b.HasIndex("ComponentTasksID");

                    b.HasIndex("StudentsStudentID");

                    b.ToTable("exams", (string)null);
                });

            modelBuilder.Entity("NursingPracticals.Models.MainClasses", b =>
                {
                    b.Property<int>("MainClassesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("mainclassesid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MainClassesID"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("classname");

                    b.Property<bool>("ClassStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("classstatus");

                    b.Property<int>("ProgramsID")
                        .HasColumnType("integer")
                        .HasColumnName("programsid");

                    b.HasKey("MainClassesID")
                        .HasName("pk_mainclasses");

                    b.HasIndex("ProgramsID");

                    b.ToTable("mainclasses", (string)null);
                });

            modelBuilder.Entity("NursingPracticals.Models.Programs", b =>
                {
                    b.Property<int>("ProgramsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("programsid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProgramsID"));

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("programname");

                    b.HasKey("ProgramsID")
                        .HasName("pk_programs");

                    b.ToTable("programs", (string)null);

                    b.HasData(
                        new
                        {
                            ProgramsID = 1,
                            ProgramName = "Public Health Nursing"
                        },
                        new
                        {
                            ProgramsID = 2,
                            ProgramName = "Nurse Assistant Preventive"
                        },
                        new
                        {
                            ProgramsID = 3,
                            ProgramName = "Post-NAC/NAP Midwifery"
                        });
                });

            modelBuilder.Entity("NursingPracticals.Models.Steps", b =>
                {
                    b.Property<int>("StepsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("stepsid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StepsID"));

                    b.Property<short>("ComponentTasksID")
                        .HasColumnType("smallint")
                        .HasColumnName("componenttasksid");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("stepname");

                    b.HasKey("StepsID")
                        .HasName("pk_steps");

                    b.HasIndex("ComponentTasksID");

                    b.ToTable("steps", (string)null);
                });

            modelBuilder.Entity("NursingPracticals.Models.Students", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("studentid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudentID"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("fullname");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("imageurl");

                    b.Property<string>("IndexNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("indexnumber");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<int>("MainClassesID")
                        .HasColumnType("integer")
                        .HasColumnName("mainclassesid");

                    b.HasKey("StudentID")
                        .HasName("pk_students");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("NursingPracticals.Models.TaskGroups", b =>
                {
                    b.Property<int>("TaskGroupsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("taskgroupsid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskGroupsID"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("groupname");

                    b.Property<int[]>("Programs")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("programs");

                    b.HasKey("TaskGroupsID")
                        .HasName("pk_taskgroups");

                    b.ToTable("taskgroups", (string)null);

                    b.HasData(
                        new
                        {
                            TaskGroupsID = 1,
                            GroupName = "Home Visit",
                            Programs = new[] { 1, 2 }
                        },
                        new
                        {
                            TaskGroupsID = 2,
                            GroupName = "General Nursing",
                            Programs = new[] { 1, 3 }
                        },
                        new
                        {
                            TaskGroupsID = 3,
                            GroupName = "Midwifery",
                            Programs = new[] { 3 }
                        },
                        new
                        {
                            TaskGroupsID = 4,
                            GroupName = "Child Welfare Clinic",
                            Programs = new[] { 1, 2 }
                        });
                });

            modelBuilder.Entity("NursingPracticals.Models.TeacherSchedules", b =>
                {
                    b.Property<int>("TeacherSchedulesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("teacherschedulesid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeacherSchedulesID"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("classname");

                    b.Property<int>("ClassSchedulesID")
                        .HasColumnType("integer")
                        .HasColumnName("classschedulesid");

                    b.Property<string>("Tutor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tutor");

                    b.HasKey("TeacherSchedulesID")
                        .HasName("pk_teacherschedules");

                    b.ToTable("teacherschedules", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetroleclaims_aspnetroles_roleid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NursingPracticals.Contexts.ApplicationUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserclaims_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NursingPracticals.Contexts.ApplicationUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserlogins_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetroles_roleid");

                    b.HasOne("NursingPracticals.Contexts.ApplicationUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetuserroles_aspnetusers_userid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NursingPracticals.Contexts.ApplicationUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnetusertokens_aspnetusers_userid");
                });

            modelBuilder.Entity("NursingPracticals.Models.ClassSchedules", b =>
                {
                    b.HasOne("NursingPracticals.Models.MainClasses", null)
                        .WithMany("ClassSchedules")
                        .HasForeignKey("MainClassesID")
                        .HasConstraintName("fk_classschedules_mainclasses_mainclassesid");

                    b.HasOne("NursingPracticals.Models.TaskGroups", "TaskGroups")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("TaskGroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_classschedules_taskgroups_taskgroupsid");

                    b.Navigation("TaskGroups");
                });

            modelBuilder.Entity("NursingPracticals.Models.ComponentTasks", b =>
                {
                    b.HasOne("NursingPracticals.Models.Programs", null)
                        .WithMany("ComponentTasks")
                        .HasForeignKey("ProgramsID")
                        .HasConstraintName("fk_componenttasks_programs_programsid");

                    b.HasOne("NursingPracticals.Models.TaskGroups", "TaskGroups")
                        .WithMany("ComponentTasks")
                        .HasForeignKey("TaskGroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_componenttasks_taskgroups_taskgroupsid");

                    b.Navigation("TaskGroups");
                });

            modelBuilder.Entity("NursingPracticals.Models.Exams", b =>
                {
                    b.HasOne("NursingPracticals.Models.ComponentTasks", "ComponentTasks")
                        .WithMany()
                        .HasForeignKey("ComponentTasksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_exams_componenttasks_componenttasksid");

                    b.HasOne("NursingPracticals.Models.Students", "Students")
                        .WithMany("Exams")
                        .HasForeignKey("StudentsStudentID")
                        .HasConstraintName("fk_exams_students_studentsstudentid");

                    b.OwnsMany("NursingPracticals.Models.Scores", "Scores", b1 =>
                        {
                            b1.Property<int>("ExamsID")
                                .HasColumnType("integer")
                                .HasColumnName("examsid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<byte>("Score")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("smallint")
                                .HasColumnName("score");

                            b1.Property<int>("StepsID")
                                .HasColumnType("integer")
                                .HasColumnName("stepsid");

                            b1.HasKey("ExamsID", "Id");

                            b1.ToTable("exams");

                            b1.ToJson("scores");

                            b1.WithOwner()
                                .HasForeignKey("ExamsID")
                                .HasConstraintName("fk_exams_exams_examsid");
                        });

                    b.Navigation("ComponentTasks");

                    b.Navigation("Scores");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("NursingPracticals.Models.MainClasses", b =>
                {
                    b.HasOne("NursingPracticals.Models.Programs", "Programs")
                        .WithMany("MainClasses")
                        .HasForeignKey("ProgramsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mainclasses_programs_programsid");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("NursingPracticals.Models.Steps", b =>
                {
                    b.HasOne("NursingPracticals.Models.ComponentTasks", "ComponentTasks")
                        .WithMany("Steps")
                        .HasForeignKey("ComponentTasksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_steps_componenttasks_componenttasksid");

                    b.Navigation("ComponentTasks");
                });

            modelBuilder.Entity("NursingPracticals.Models.TeacherSchedules", b =>
                {
                    b.OwnsMany("NursingPracticals.Models.StudentsSchedules", "StudentsSchedules", b1 =>
                        {
                            b1.Property<int>("TeacherSchedulesID")
                                .HasColumnType("integer")
                                .HasColumnName("teacherschedulesid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("fullname");

                            b1.Property<int>("StudentsID")
                                .HasColumnType("integer")
                                .HasColumnName("studentsid");

                            b1.HasKey("TeacherSchedulesID", "Id");

                            b1.ToTable("teacherschedules");

                            b1.ToJson("studentsschedules");

                            b1.WithOwner()
                                .HasForeignKey("TeacherSchedulesID")
                                .HasConstraintName("fk_teacherschedules_teacherschedules_teacherschedulesid");
                        });

                    b.Navigation("StudentsSchedules");
                });

            modelBuilder.Entity("NursingPracticals.Models.ComponentTasks", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("NursingPracticals.Models.MainClasses", b =>
                {
                    b.Navigation("ClassSchedules");
                });

            modelBuilder.Entity("NursingPracticals.Models.Programs", b =>
                {
                    b.Navigation("ComponentTasks");

                    b.Navigation("MainClasses");
                });

            modelBuilder.Entity("NursingPracticals.Models.Students", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("NursingPracticals.Models.TaskGroups", b =>
                {
                    b.Navigation("ClassSchedules");

                    b.Navigation("ComponentTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
